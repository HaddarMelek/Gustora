{% extends 'base.html.twig' %}

{% block title %}Hello!{% endblock %}

{% block body %}
<div class="form-container">
    <div class="card">
        <div class="card-header">
            Dashboard
        </div>
        <div class="card-body">
            <h5 class="card-title">Email - {{ user.email }}</h5>
            <p class="card-text">Phone Number - {{ user.countryCode }} {{ user.phoneNumber }}</p>
            <a href="/logout" class="btn btn-primary">Logout</a>
        </div>
    </div>
    <div class="d-flex gap-3 mb-4">
        <a href="{{ path('app_cart_show') }}" class="btn btn-primary">
            <i class="fas fa-shopping-cart"></i> 
            View Cart
            {% if app.user.cart and app.user.cart.items|length > 0 %}
                <span class="badge bg-danger">{{ app.user.cart.items|length }}</span>
            {% endif %}
        </a>
        {# ... other buttons ... #}
    </div>
    <div class="col-md-9">
            {{ render(controller('App\\Controller\\PublicProductController::index')) }}
        </div>
</div>
{% endblock %}

{% block javascripts %}
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const generateOTP = async () => {
            try {
                const response = await fetch("{{ path('generateOTP') }}", {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });

                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Server returned invalid content type');
                }

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to send OTP');
                }
                
                return true;
            } catch (error) {
                console.error('OTP Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message
                });
                return false;
            }
        };

        const verifyOTP = async (otp) => {
            try {
                console.log('Verifying OTP:', otp); // Debug log
                const response = await fetch("{{ path('verifyOTP') }}", {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ otp: otp.trim() }) // Trim any whitespace
                });

                const data = await response.json();
                console.log('Verification response:', data); // Debug log
                
                if (!response.ok) {
                    throw new Error(data.error || 'Verification failed');
                }
                
                return data;
            } catch (error) {
                console.error('Verification error:', error);
                throw error;
            }
        };

        const showOTPForm = async () => {
            Swal.fire({
                title: 'Sending OTP...',
                text: 'Please wait while we send the code to your phone',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const otpSent = await generateOTP();
            
            if (!otpSent) return;

            Swal.fire({
                title: 'Verify Your Phone Number',
                html: `Please enter the verification code sent to<br>+{{ user.countryCode }} {{ user.phoneNumber }}`,
                input: 'text',
                inputAttributes: {
                    autocapitalize: 'off',
                    maxlength: 6,
                    minlength: 6,
                    placeholder: 'Enter the 6-digit code'
                },
                showCancelButton: false, // Remove cancel button
                confirmButtonText: 'Verify',
                showLoaderOnConfirm: true,
                allowOutsideClick: false, // Prevent closing
                allowEscapeKey: false, // Prevent closing with Esc key
                preConfirm: async (otp) => {
                    if (!/^\d{6}$/.test(otp)) {
                        Swal.showValidationMessage('Please enter a valid 6-digit code');
                        return false;
                    }
                    try {
                        return await verifyOTP(otp);
                    } catch (error) {
                        Swal.showValidationMessage(error.message);
                        return false;
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Success',
                        text: result.value.message,
                        icon: 'success'
                    });
                }
            });
        }

        // Auto-trigger OTP verification when page loads
        document.addEventListener('DOMContentLoaded', () => {
            showOTPForm();
        });
    </script>
{% endblock %}